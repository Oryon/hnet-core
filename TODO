-*- outline -*-

* Things to do

** PA alg features

*** detect RID changes

if OSPF changes RID, we should update it in elsa_pa (and pa)

** Comprehensively test PA alg

** Integrate PA alg, OSPF-ELSA codec, SKV, and rest [1/3]

*** pm module (probably should run elsewhere than in OSPF?)

 maintain local if state according to 'ospf-lap' / 'ospf-usp' changes

 - mutate radvd.conf

 - ip address add/remove

 ospf-usp can be used to control which prefixes we care about, but
 alternative approach is to give control of _all_ assignments to this.



** Multihoming support

- requires next-hop finding (from rt.c / process_prefixes can take some
  hints, as it calculates the IPv6 prefix reachability based on the
  advertising router ids - we should do something similar, router id if the
  USP => calculate next hop for that)

- PM should configure skv-published USP+if+nexthop pairs to 'ip rule' table

'ospf-usp' key will contain stuff for ip rule table
 {{prefix=usp-prefix, ifname=ifname, nh=next-hop}, ...}

* Things to do if I have time (hah)

** Optimize PA alg

*** Make sure computational complexity of all ops is minimal

I'm looking at you, self.asp[rid]

*** PA alg - enable incremential mode 

LSAs changed, IFs changed

*** PA alg - enable even more incremential mode 

just get provided with LSA updates


** Document architecture better

- at least what moves, where

- which modules exist

- ...


** Naming support?

- should provide stateless DHCPv6 with DNS info at least (gathered from all
  providers?)

* Done (1.10.+)

** Make command line tool to inject USPs

skvtool.lua!

** Integrate PA alg, OSPF-ELSA codec, SKV, and rest 

*** wrapper around elsa_pa for elsa.lua [done 04/10]

*** elsa_pa module [done 03/10]

 OSPF => PA

 - provides 'client' interface to pa using elsa + codec

 => ASP, USP information from ELSA + codec decoded OSPFv3 LSAs
 => if information from ELSA

 + data from skv [USP]

 PA => OSPF
 - originates AC payloads using 'codec' and pa local ASP state
 + data from skv [USP]

 PA => PM
 - use skv to publish state
 + local interface info [LAP]
 + USP info

SKV content:

'pd.<if>' results of DHCPv6 prefix delegation for a single interface
 format: {{prefix[, valid-lifetime]}, ...}

'iflist' should be a list of interfaces that have been seen _at some point_
(this can be updated by scripts, or ospf)

'ospf-lap' key will contain state local hosts should care about
 {{ifname=ifname, prefix=prefix}, ...} for every non-depracated prefix

'ospf-usp' key will contain usable prefixes in the network
 (we make sure the system interfaces won't have ip addrs that are in
 ospf-usp prefixes, but not in ospf-lap)

** Figure why enabling debug breaks tests

** Write PA alg prototype in Lua

** Converted to strict.lua

* Done (24.9.+)

** Implement simple (len, binary-blob) low level i/o for SKV

** Implement JSON wrapping on top of that

** Write handlers for reading/writing JSON as needed

** Add whole 'listener' abstraction, deal with it (client+server)

 - {add,remove}_change_observer in skv

** SWIG ELSA + provide for Lua running inside BIRD

** Write AC LSA en-decode functionality in LUA
