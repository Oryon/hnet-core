-*- outline -*-

* Bugs to fix

* Things to do

** Compile for Buffalo, get it working there

- write scripts (using Python telnetlib) to produce ~desired router config
  from scratch


Plan A: Use vanilla image, do necessary building on top

- install desired packages (at least luasocket)

  http://wiki.openwrt.org/doc/techref/opkg

- cross-compile only BIRD

  => world's your oyster

OR

Plan B: Change OpenWRT installation s.t. luasocket is default, and so is
patches BIRD

(probably the plan B is actually easier; after that, need to only worry
about configuration files, the image is plug-n-play out of the box)


** 6RD integration (static WAN)

- just setup the variable using skvtool.lua based on DHCPv6 result

[multiprovider stuff needs some extra action]

** Multihoming support

+ requires next-hop finding (from rt.c / process_prefixes can take some
  hints, as it calculates the IPv6 prefix reachability based on the
  advertising router ids - we should do something similar, router id of the
  USP => calculate next hop for that)

 rt.c/ri_install_rt probably more relevant

  ip_addr addr = ipa_from_rid(rid);
  ort *r = (ort *)fib_get(&ospf_area->rtr, &addr, MAX_PREFIX_LENGTH);
  .. fib_find better - returns NULL if non existent
  .. look at r->n->nhs

 [ using topology.[ch] + the leftover ->nhs from the rt.c SPF calculation;
 officially supposed not to work, but it seems to ]


 + add API to elsai to get routes to specific router id's => win(?), and
 use it to produce next hop + ifname to iterate_rid callbacks
   
- PM should configure skv-published USP+if+nexthop pairs to 'ip rule' table

'ospf-usp' key will contain stuff for ip rule table
 {{prefix=usp-prefix, ifname=ifname, nh=next-hop}, ...}

 ! track down why it doesn't currently quite work.. yet :p

** Comprehensively test PA alg (2/2)

- think more corner cases to test

* Things to do if I have time (hah)

** Minimize the BIRD changes (now there's still too many leftovers)

** Optimize PA alg

*** Profile it (no premature optimizations)

*** Make sure computational complexity of all ops is minimal

pa.asp lookups - now use rid as key

- iid natural index - used in prefix assignment algorithm (run_if_usp)

 ! hmmh. iid nonunique though, and rid IS primary key now that I figured
 that rid+iid is the unique key (took me a month but .. :-p) perhaps rid is
 ok?

- prefix should be also index (binary prefix, probably) => conflict resolution
  constant time (check_asp_conflicts)

- rid only relevant for finding own ASPs - we could store them separately
  anyway? (get_local_asp_values)

- usp => asp needed - or some other way (find_assigned)
  given #usp small, not necessary?

pa.usp lookups - now use rid as key

- containing prefix lookup cannot be optimized (or probably not worth it,
  #usp is small)


*** PA alg - enable incremential mode 

step 1: LSAs changed, IFs changed

*** PA alg - enable even more incremential mode 

step 2: individual LSA change notifications

(IF changes are hopefully rare enough..)

just get provided with LSA updates



** IPv4 support

What does it _mean_? RFC 1918 space allocation, pick _one_ random prefix,
NAT outbound stuff. Try to avoid detectable conflicts.

*** Who originates v4-ULA?

- whoever has highest combination of (configured, rid)

=> configured overrides rid, rid used as tie-breaker

- if not configured, ULA-like behavior

 - try for unique-ish based on v4-upstream's (SHOULD)

**** DIFFERENCE to ULA

- we want to have this setup regardless of existing v4 connectivity

- BUT we want to know about potential conflicts in the DHCP'd addresses

*** What payloads we need?

v4-ULA

- the internal address we use

v4-upstream (SHOULD)

- egress links' assigned addresses

(used to make ULA separate from them, if possible)

v4-ASP

- like v6 ASP

*** USP scheme

Just use 10.Y.X.0, or 192.168.X.0

Y = random number picked by whoever provides the route (v4-ULA message)

X = assigned subnet # (if someone has more than 255 networks in their home
running v4, oh well; we can alternatively use Y space also for X if that's
better model, but this one works with CGN that uses 10.* space, with 1/256
chance of failure .. )

*** How we detect upstream connectivity? [if we want it dynamically anyway]

Simple - run DHCPv4 client _on each interface_, listen for anything that's
NOT from v4-ULA.

=> what's needed:

- DHCPv4 client per interface on box, which publishes results to skv pd-v4.IF
- slightly modified variant of PA alg
- PM needs to configure
 - NAT rule 
 - DHCPv4 server per non-pd-v4.IF 

** Document architecture better

- at least what moves, where

- which modules exist

- ...


** Plain naming support?

- should provide stateless DHCPv6 with DNS info at least (gathered from all
  providers?)

** Border detection - DHCPv6 PD integration

Somehow keep probing that DHCPv6 server is present on link.. that may
require luasocket w/ v6?

!!! fairly broken that we have to use SLAAC to get default route on
    interface; also making sure it stays valid is awkward.. and should make
    sure it's not one of the OSPF talking nodes somehow (...)

I suppose we can play with ND to make sure it stays there (and therefore
DHCPv6 solicit flooding isn't really neccessary?)

*** Which DHCPv6 PD to use?

- ISC has huge dependencies and is big

- dnsmasq too integrated with dnsmasq

 <2k LoC

- udhcp in busybox seems bit broken

 <2k LoC

.. just implement the state machine in SMC, make it a public reference, 


** Write ~Pythonic key handling to mst. data structures

- requires ~Pythonia equality function


- API-wise, should look like current one

- except, accept tables and other arbitrary structures as keys and compare
  them 'correctly' (now, has to be same table instance for it to work,
  which is unfortunate)

* Improvements that affect only performance

** Aggregate the updates somehow

- either glob things to bigger blobs (e.g. 'ospf-pa' key) [possibly
  inefficient in terms of transmitted data]

or

- send updates via 0-timeout in event loop in single big packets [requires
  bit smarter handling code]

* Done (15.10.+)

** Refactor callbacks etc. to use tables more

more than one argument => chance to get order wrong (with one, well..)

* Done (8.10.+)

** DHCPv6 PD integration (static WAN)

- just set up the variable using skvtool.lua, and we're golden?

[multiprovider stuff needs some extra action]

** Comprehensively test PA alg

- corner cases (sigh)
 - running out of addrs
 - different conflict situations?

- fixed iid-is-global assumption I made.. (*sigh*)

** PA alg features

*** ULA generation

*** HW addr stuff, duplicate router detection

*** detect RID changes

if OSPF changes RID, we should update it in elsa_pa (and pa)


* Done (1.10.+)

** Make command line tool to inject USPs

skvtool.lua!

** Integrate PA alg, OSPF-ELSA codec, SKV, and rest 

*** pm module (probably should run elsewhere than in OSPF?) [done 05/10]

 maintain local if state according to 'ospf-lap' / 'ospf-usp' changes

 - mutate radvd.conf

 - ip address add/remove

 ospf-usp can be used to control which prefixes we care about, but
 alternative approach is to give control of _all_ assignments to this.

*** wrapper around elsa_pa for elsa.lua [done 04/10]

*** elsa_pa module [done 03/10]

 OSPF => PA

 - provides 'client' interface to pa using elsa + codec

 => ASP, USP information from ELSA + codec decoded OSPFv3 LSAs
 => if information from ELSA

 + data from skv [USP]

 PA => OSPF
 - originates AC payloads using 'codec' and pa local ASP state
 + data from skv [USP]

 PA => PM
 - use skv to publish state
 + local interface info [LAP]
 + USP info

SKV content:

'pd.<if>' results of DHCPv6 prefix delegation for a single interface
 format: {{prefix[, valid-lifetime]}, ...}

'iflist' should be a list of interfaces that have been seen _at some point_
(this can be updated by scripts, or ospf)

'ospf-lap' key will contain state local hosts should care about
 {{ifname=ifname, prefix=prefix}, ...} for every non-depracated prefix

** Figure why enabling debug breaks tests

** Write PA alg prototype in Lua

** Converted to strict.lua

* Done (24.9.+)

** Implement simple (len, binary-blob) low level i/o for SKV

** Implement JSON wrapping on top of that

** Write handlers for reading/writing JSON as needed

** Add whole 'listener' abstraction, deal with it (client+server)

 - {add,remove}_change_observer in skv

** SWIG ELSA + provide for Lua running inside BIRD

** Write AC LSA en-decode functionality in LUA
